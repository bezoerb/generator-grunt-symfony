<?php

/**
 * Copyright (c) 2015 Ben Zörb
 * Licensed under the MIT license.
 * http://bezoerb.mit-license.org/
 */


namespace Utils\GruntBundle\Templating\Asset;

use Symfony\Component\Config\ConfigCache;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\Asset\Package;
use Symfony\Component\Config\FileLocator;
use Symfony\Component\Translation\Loader\JsonFileLoader;
use Symfony\Component\Translation\MessageCatalogue;
use Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy;

/**
 * The path packages adds a version and a base path to asset URLs for use with node's filerev .
 *
 * @author Ben Zörb <ben@sommerlaune.com>
 */
class BasePackage extends Package
{

    /**
     * Service container
     *
     * @var ContainerInterface
     */
    protected $container;

    /**
     * @var MessageCatalogue
     */
    protected $summary;

    /**
     * Asset root dir
     *
     * @var string
     */
    protected $rootDir;


    /**
     * Constructor.
     *
     * @param string $rootDir     The asset root directory
     * @param string $summaryFile Grunt filerev summary file
     * @param string $cacheDir    Kernel cache dir
     * @param bool   $debug       Debug
     */
    public function __construct($rootDir, $summaryFile, $cacheDir, $debug)
    {
        parent::__construct(new EmptyVersionStrategy());

        $this->rootDir = $rootDir;
        $this->summaryFile = $summaryFile;
        $this->cacheDir = $cacheDir;
        $this->debug = $debug;

        $this->initializeCacheCatalogue();
    }


    /**
     * {@inheritdoc}
     */
    public function getUrl($path, $version = null)
    {
        if ($this->isAbsoluteUrl($path)) {
            return $path;
        }

        return $this->applyVersion($path, $version);
    }

    /**
     * Get filerev summary
     *
     * @return MessageCatalogue
     * @throws \Exception
     */
    protected function getSummary()
    {
        if (!$this->summary instanceof MessageCatalogue) {
            throw new \Exception('Summary is not injected into ' . get_class($this));
        }

        return $this->summary;
    }

    /**
     * Get reved filename from summary
     *
     * @param $file
     *
     * @return string
     */
    protected function getRevedFilename($file)
    {
        $this->initializeCacheCatalogue();
        return $this->summary->get($file);
    }


    /**
     * Initialize filerev catalogue from filerev.json
     *
     * @param string $summaryFile Grunt filerev summary file
     */
    protected function initializeCatalogue($summaryFile)
    {
        // try to fetch config file generated by grunt filerev
        // use empty cataloge if file does not exist
        $locator = new FileLocator(__DIR__ . '/../../Resources/config');
        try {
            $resources = $locator->locate($summaryFile, null, false);

            if (is_array($resources) && count($resources)) {
                $resource = array_shift($resources);
                $loader = new JsonFileLoader();
                $this->summary = $loader->load($resource, null);
                return;
            }

        } catch (\InvalidArgumentException $e) {
            // no summary set
        }

        $this->summary = new MessageCatalogue(null);
    }


    /**
     * Initialize filerev catalogue from cache
     * or generate cache if not already available
     */
    protected function initializeCacheCatalogue()
    {
        if (isset($this->summary)) {
            return;
        }

        $cache = new ConfigCache($this->getCatalogueCachePath($this->cacheDir), $this->debug);
        if (!$cache->isFresh()) {
            $this->initializeCatalogue($this->summaryFile);

            $content = sprintf(<<<EOF
<?php

use Symfony\Component\Translation\MessageCatalogue;

\$catalogue = new MessageCatalogue(null, %s);

return \$catalogue;

EOF
                ,
                var_export($this->summary->all(), true)
            );

            $cache->write($content, $this->summary->getResources());

            return;
        }

        $this->summary = include $cache;
    }

    /**
     * Cache path
     *
     * @param string $cacheDir Kernel cache dir
     *
     * @return string
     */
    protected function getCatalogueCachePath($cacheDir)
    {
        return $cacheDir.'/filerev.summary.php';
    }
}
